network publica (outbound = 'yes')
network privada ()

system im (
cpu.count>=1 and
memory.size>=2G and
net_interface.0.connection = 'publica' and
net_interface.1.connection = 'privada' and
net_interface.1.dns_name = 'imservice' and
disk.0.os.name='linux' and
disk.0.os.flavour='ubuntu' and
disk.0.os.version>='16.04' and
disk.0.os.credentials.new.password = 'Tututu+01' and
disk.0.applications contains (name='ansible.modules.grycap.docker')
)

system imclient (
cpu.count>=1 and
memory.size>=1G and
net_interface.0.connection = 'privada' and
net_interface.0.dns_name = 'imclient' and
disk.0.os.name='linux' and
disk.0.os.flavour='ubuntu' and
disk.0.os.version>='16.04' and
disk.0.os.credentials.new.password = 'Tututu+01'
)

system infra (
cpu.count>=8 and
memory.size>=8G and
net_interface.0.connection = 'privada' and
net_interface.0.dns_name = 'infra' and
disk.0.os.name='linux' and
disk.0.os.flavour='ubuntu' and
disk.0.os.version>='16.04' and
disk.0.os.credentials.new.password = 'Tututu+01'
)


configure im (
@begin
---
  - vars:
     IM_SERVICE_IP: "{{ hostvars[groups['im'][0]]['IM_NODE_PRIVATE_IP'] }}"
     IM_PORTS: 
         - {xmlrpc: 7799, rest: 8801}
         - {xmlrpc: 6699, rest: 8802}
    roles:
     - { role: 'grycap.docker' }
    tasks:
#    - name: Upgrade pip version
#      pip: name=pip extra_args='-I' state=latest

    - name: install docker-py
    # user 1.9 version as ansible fails in case of 1.10 or higher 
      pip: name=docker-py version=1.9.0

    - name: mysql container
      docker:
        name: immysql
        image: "mysql:5.7"
        state: started
        env:
            MYSQL_ROOT_PASSWORD: impass
            MYSQL_DATABASE: imdb 

    - name: im container
      docker:
        name: im-{{item.xmlrpc}}
        image: "grycap/im"
        state: started
        ports:
        - "{{item.rest}}:8800"
        - "{{item.xmlrpc}}:8899"
        expose:
        - 8899
        - 8800
        links:
        - "immysql:immysql"
        env:
            IM_DATA_DB: "mysql://root:impass@immysql/imdb"
      with_items: "{{IM_PORTS}}"
      
    - name: Create HAProxy template
      copy:
        dest: /etc/haproxy_tomcat.cfg.j2
        content: |
            defaults
                timeout connect      5000
                timeout client       50000
                timeout server       50000
                mode http

            listen statistics
                bind *:9000
                mode http
                stats enable
                stats realm Haproxy\ Statistics
                stats uri /haproxy_stats
                stats auth micafer:grycap01

            frontend http-frontend
                bind *:8800
                default_backend imbackend

            backend imbackend
                balance roundrobin
                stick-table type string len 32 size 30k expire 120m
                stick store-response hdr(InfID)
                #stick on hdr(InfID)
                acl inf_id path -m beg /infrastructures/
                #acl inf_id path_len gt 40
                stick on path,field(3,/) if inf_id


            {% raw %}
            {% for port in IM_PORTS %}
                server im-{{port.rest}} {{IM_SERVICE_IP}}:{{port.rest}} check
            {% endfor %}{% endraw %}

    - name: Configure HAProxy
      template: src=/etc/haproxy_tomcat.cfg.j2 dest=/etc/haproxy.cfg mode=0644

    - name: start haproxy container
      docker:
        name: haproxy
        image: "haproxy:latest"
        state: started
        ports:
        - "8800:8800"
        - "9000:9000"
        expose:
        - 8800
        - 9000
        volumes:
        - "/etc/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg"

    - name: Install Reqs
      apt: name=sysstat update_cache=yes cache_valid_time=3600
      when: ansible_os_family == "Debian"
      
    - name: Install Reqs
      yum: name=sysstat
      when: ansible_os_family == "RedHat"

    - name: Configure sysstat
      lineinfile: dest=/etc/default/sysstat regexp="^ENABLED=" line='ENABLED="true"'
      when: ansible_os_family == "Debian"

    - name: Configure cron sysstat
      #copy: dest=/etc/cron.d/sysstat content="*/1 * * * * root date >> /tmp/dates && /usr/lib/sysstat/debian-sa1 1 1\n"
      copy: dest=/etc/cron.d/sysstat content="*/1 * * * * root command -v /usr/lib/sysstat/debian-sa1 > /dev/null && /usr/lib/sysstat/debian-sa1 1 1\n"
      when: ansible_os_family == "Debian"

    - name: Restart sysstat
      service: name=sysstat state=restarted
      
    - name: Start sysstat
      shell: /usr/lib/sysstat/debian-sa1 1 1
      when: ansible_os_family == "Debian"
@end
)

configure imclient (
@begin
---
  - vars:
    - INFRA_NODE_IP: "{{ hostvars[groups['infra'][0]]['IM_NODE_NET_0_IP'] }}"
    tasks:
    - name: Install Reqs
      apt: name=gcc,python-dev,python-pip,python-mysqldb,openssh-client,sshpass,libssl-dev,libffi-dev,libsqlite3-dev update_cache=yes cache_valid_time=3600

    - name: Install IM with Pip
      pip: name=IM

    - name: Create auth.dat file
      copy:
        dest: /tmp/auth.dat
        content: |
            type = InfrastructureManager; username = imuser01; password = invitado
            type = VMRC; host = http://servproject.i3m.upv.es:8080/vmrc/vmrc; username = demo; password = demo
            id = docker; type = Docker; host = http://{{INFRA_NODE_IP}}:2375
        mode: 0644

    - name: Download LoadTest files
      get_url: url=https://raw.githubusercontent.com/grycap/im/devel/test/loadtest/{{item}} dest=/tmp/{{item}}
      with_items:
       - LoadTest.py
       - LoadTestR.py
       - load-test.radl
       - LoadTestREST.py
       - LoadTestRESTR.py

@end
)

configure infra (
@begin
  - roles:
    - { role: 'grycap.docker', docker_opts: '-H tcp://0.0.0.0:2375' }
  - tasks:
    - command: docker -H tcp://localhost:2375 pull ubuntu:14.04
@end
)

deploy im 1
deploy imclient 1
deploy infra 1
